http://editor.swagger.io/[default editor for swagger]

Metadata, API Name & Description
Every Swagger document starts with Swagger version declaration swagger: "2.0". Then you can specify info object for additional metadata. title and version are required parameters, others like description are optional. See Known limitations on what parameters are not supported.

URL definition
schemes is an array protocols supported by API. You can specify them like so: [http, https]. Apiary will use https if defined
host is domain for API
basePath defines URL prefix for all defined endpoints.
For example, defining /account endpoint actually means scheme://host/basePath/account

Paths
paths: object defines endpoints in your API. x-summary and x-description are Apiary defined Swagger extensions.

Tags
tags are used for grouping related API endpoints.

Operations
Operations (like get or post) on paths defines actions. In Apiary documentation, summary will be used as action title, and description as action description.

Limitations
Swagger doesn’t support some features:

Example values of HTTP headers (see our x-example extension)
Multiple requests
Using `operationId`
Each operation can specify operationId. 

Operation responses
You can describe multiple responses, for different content-types.

Limitations
Swagger doesn’t support some features:

Response headers
Request-Response pairing
Response names
Definitions
definitions have same goal as MSON. Make it easy to describe data structures and use them in API Description. Unlike MSON, definitions in Swagger are using JSON Schema and JSON Schema referencing for use inside API Description. Here is an example API using definitions:

swagger: "2.0"
info:
  version: 1.0.0
  title: swagger-demo
  description: Description of the API in Markdown
host: petstore.swagger.io
tags:
  - greeting
basePath: /api
schemes: [http]
paths:
  /message/{name}:
    x-summary: Message operations
    x-description: Operation description in Markdown
    get:
      summary: Get a message of the day
      description: |
       Description of the operation in Markdown
      operationId: getMessage
      parameters:
        - name: name
          in: query
          description: name to include in the message
          type: string
          x-example: 'Hello, Adam!'
      responses:
        default:
          description: Bad request
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Message'
          examples:
            'application/json':
              message: 'Hello, Adam!'
definitions:
  Message:
    required:
      - message
    properties:
      message:
        type: string
        default: 'Hello, Adam!'




The OpenAPI Specification is an API description format or API definition language. Basically, an OpenAPI Specification file allow you to describe an API including (among other things):

General information about the API
Available paths (/resources)
Available operations on each path (get /resources)
Input/Output for each operation
The Open API Specification’s specification can be found in the github repository of the Open API Initiative. This document describes every aspect of the Open API Specification. Even if this documentation is fairly easy to read, I was sometimes a little bit lost. So, based on this text specification, I have created the OpenAPI Map a visual documentation which can help to figure how a OpenAPI specification file is structured for people who are more visual.
Using an API definition language such as OpenAPI specification helps to describe easily and quickly an API. It’s particularly useful when you’re in the design process of your API (cf. my first post in the series).

Being a simple text file, the OpenAPI specification file can be shared and managed within any VCS just like [code]/code.
Once written, OpenAPI specification file can also be used as:
source material for documentation
specification for developers
partial or complete code generation

An Open API Specification file can be written either in JSON or YAML. But, if you intend to write and not generate this file, I urge you to do that in YAML as YAML is far more easy to write and read than JSON.

A picture is worth a thousand words, let’s compare a simple definition in JSON…

{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Simple API",
        "description": "A simple API to learn how to write OpenAPI Specification"
    },
    "schemes": [
        "https"
    ],
    "host": "simple.api",
    "basePath": "/openapi101",
    "paths": {
        "/persons": {
            "get": {
                "summary": "Gets some persons",
                "description": "Returns a list containing all persons.",
                "responses": {
                    "200": {
                        "description": "A list of Person",
                        "schema": {
                            "type": "array",
                            "items": {
                                "properties": {
                                    "firstName": {
                                        "type": "string"
                                    },
                                    "lastName": {
                                        "type": "string"
                                    },
                                    "username": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
…to the same definition in YAML:

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
 description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons.
      responses:
        200:
          description: A list of Person
          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
YAML seems definitely more easy to write and read for humans. And almost every tool using OpenAPI specification files handle YAML. In last resort, you can easiliy convert YAML to JSON (and vice versa).

Editor and editing Swagger files:
Even if an OpenAPI specification is a simple text file which can be edited with any text editor, it’s better to use a specialized one. The best available tool to write Open API Specification file is Swagger Editor. It’s a set of static file allowing you to write and validate Open API Specification in YAML and see a rendering of the written specification.

Swagger is the most widely used standard for specifying and documenting REST Services.

The real power of the Swagger standard comes from the ecosystem of powerful tools that surrounds it.

For example, there’s Swagger Editor for writing the Swagger spec, Swagger Codegen for automatically generating code based on your Swagger spec, and Swagger UI for turning your Swagger spec into beautiful documentation that your API users will love to read.

Why use Swagger?
But why not use another standard (like RAML) or simply open your favorite word processor and start hitting the keys?

There are 5 good reasons for using Swagger:

Industry Standard: Swagger is the most widely adopted documentation and specification standard for REST Services. This means that it’s already used in real production APIs, so you don’t have to be the beta tester. It also means that the API user has probably already experience with Swagger, which dramatically reduces the learning curve.
Designed for REST: Swagger is really easy to use, because it’s a single-purpose tool for documenting REST Services. So most of the complicated things, like security or reusing resource definitions across several methods, are already handled gracefully by the standard.
Huge Community: There’s a great community around Swagger, so when you face a problem, you can usually just Google the solution.
Beautiful Documentation: The customer-facing documentation looks really nice. Plus there is a built-in way to actually call the services, so the API user won’t need to use an external tool to play around with the services, but can just do it inside the documentation.
Auto-generate Code: You can auto-generate client and server code (interface part) based on the Swagger spec, which makes sure that they are consistent. You could even make your own tools.

In the top part of the Swagger specification, you write all the general stuff about your API:

swagger: '2.0'

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: "v1"
  title: REST API for 'The Movie App'
  description: |
Demo
    
host: movieapp-sitepointdemos.rhcloud.com
basePath: /api
Here is an explaination of some of the properties:

swagger: This is to say we use Swagger 2.0. It should always be "2.0".
title: The title of your API documentation.
description: A description of your API. It is always nice with examples.
version: The version of your API (remember that for APIs a low version number is always more attractive, because a high number indicates an unstable interface and hence an extra burden on the clients using it.)
host: The server where your REST API is located.
basePath: The path on the server where your REST API is located.

In the middle part, you define the paths and HTTP Methods.

I have only included PUT below, but you can see the rest in my Swagger file.

################################################################################
#                                           Paths                              #
################################################################################
paths:
  /movies/{id}:
    put:
      summary: Update a movie
      consumes:
        - application/json 
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: number
          description: The id of the movie you want to update.
          required: true
        - in: body
          name: movie
          description: The movie you want update with.
          required: true
          schema:
            $ref: '#/definitions/Movie'
      responses:
        200:
          description: The movie has been successfully updated.
          schema:
            $ref: '#/definitions/Message'
Below paths you define a path (e.g. /movies/{id}) and then you define the HTTP methods (e.g. PUT) that the path can be used with.

summary: A short description of the service. There is also a description property for a more lengthy description, if necessary.
consumes: The content type of the data that the service consumes (you can have multiple types). The most common is application/json.
produces: The content type of the data that the service produces (you can have multiple types). The most common is application/json.
parameters: The different parameters that the service accepts. It is both parameters in the HTTP header, URI path, query string and HTTP request body.
in: Where is the parameter located? In the path, in the body, in a header, or somewhere else?
name: The name of the parameter.
type: The data type of the parameter. The common types are number and string.
description: A short, user-friendly description of the parameter.
required: Is the parameter required or optional?
responses: The possible responses that the service can return.
(HTTP Status Code): You first specify the HTTP Status Code (e.g. 200).
description: A short description of when this response happens.
schema: A definition of the response object

Given that the movie resource representation is used in almost all methods, it makes sense to write the resource definition in a single place and reuse it across the methods.

################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  Movie:
    type: object
    properties:
      _id:
        type: number
        description: A unique identifier of the movie. Automatically assigned by the API when the movie is created.
      title:
        type: string
        description: The official title of the movie. 
      releaseYear:
        type: string
        description: The year that the movie was released.
      director:
        type: string
        description: The director of the movie.
      genre:
        type: string
        description: The genre of the movie.
      __v:
        type: number
        description: An internal version stamp. Not to be updated directly.
Below definitions you define a resource type (i.e. Movie) and then you define its properties below:

type: The data type of the property. The common ones are string and number. The advanced types are objects and arrays.
description: A description of the property.
properties: If the data type is an object, you specify the object’s properties below.

An almost empty OpenAPI Specification
We’ll start with an almost empty, yet valid, file giving some basic informations.

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths: {}
OpenAPI Specification version
First we need to tell which version of the OpenAPI specification we are using via the swagger attribute…

swagger: "2.0"
Yes, swagger. As explained in the introduction, the OpenAPI specification is based on Swagger. It will probably be replaced by something else in the next version of the specification. The only possible value is (for now) 2.0.

API description
Then we give some informations about our API with info: the API’s version (not to be confused with the specification version and the file version) a title and an optional description.

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification
API URL
Speaking of web API, an important information is the root URL which people and programs will use to call it. This is described by giving a list of accepted schemes (or protocols, like http or https), a host, and a basepath.

schemes:
  - https
host: simple.api
basePath: /openapi101
All of these APIs endpoints URL will use https://simple.api/open101 as base URL. These informations are not required, an OpenAPI specification without these data is still valid.

API operations
Finally, as our API does absolutely nothing for now, we add an empty paths list. (nb. in YAML an empty object is describe using {}).

paths: {}
Defining an operation
Let our API do something by adding an operation to list some persons.

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons.
      responses:
        200:
          description: A list of Person
          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string 
Adding a path
In the paths section we add a new path /persons corresponding to the persons resource.

paths:
  /persons:
Adding an http method on path
On each path we can add any http verb (like get, post, put or delete) to manipulate the corresponding resource. To list some persons, we need to apply the get http method to the /persons resource (or path). We also give a short description (summary) and a longer one if necessary (description).

    get:
      summary: Gets some persons
      description: Returns a list containing all persons.
Therefore to list some persons we’ll have to call get /persons (or get https://simple.api/open101/persons to be precise).

Describing response
For each operation, you can describe any response matching an http status code (like 200 OK or 404 Not Found) in the responses section. We’ll only handle 200 when responding to get /persons and we’ll tell what the response means via its description.

      responses:
        200:
          description: A list of Person
Describing response’s content
The get /persons operation returns a list of persons, we describe what it is with the schema section of the response. A list of person is an object which type is array. Each item in this array is an object containing three properties of type string: firstName, lastName and username. Only username will be always provided (i.e. required).

          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
Defining query parameters
As we’ll have to handle many persons, it could be a good idea to add paging capabilities to the get /resources operation. We’ll do that by adding query parameters to define the requested page and number of items per page.

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons. The list supports paging.
      parameters:
       - name: pageSize
         in: query
         description: Number of persons returned
         type: integer
       - name: pageNumber
         in: query
         description: Page number
         type: integer
      responses:
        200:
          description: A list of Person
          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string 
 
Adding a parameters section to the get /persons operation
First we add a parameters section in get http method for /persons path.

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons. The list supports paging.
      parameters:
 
Adding paging query parameters
Then in the parameters list we define two optional parameters named pageSize and pageNumber of type integer located in query. We also provide a description for each one.

      parameters:
       - name: pageSize
         in: query
         description: Number of persons returned
         type: integer
       - name: pageNumber
         in: query
         description: Page number
         type: integer
      responses:
 
Therefore to list some persons we can use get /persons?pageSize=20&pageNumber=2 and we’ll get the page number 2 with 20 persons max.

Defining a path parameter
We would like to access directly a specific person by it’s username, so we’ll add a get /persons/{username} operation to our API. {username} is called a path parameter.

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons. The list supports paging.
      parameters:
       - name: pageSize
         in: query
         description: Number of persons returned
         type: integer
       - name: pageNumber
         in: query
         description: Page number
         type: integer
      responses:
        200:
          description: A list of Person
          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
  /persons/{username}:
    get:
      summary: Gets a person
      description: Returns a single person for its username
      parameters:
        - name: username
          in: path
          required: true
          description: The person's username
          type: string
      responses:
        200:
          description: A Person
          schema:
            required:
              - username
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
        404:
          description: The Person does not exists. 
Adding a get /persons/{username} operation
First we add a /persons/{username} path, after the /persons one, in the paths section and define the get operation for this path.

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
                username:
                  type: string
  /persons/{username}:
    get:
      summary: Gets a person
      description: Returns a single person for its username
 
Describing username path parameter
As {username} is a path parameter, we need to describe it. It is done by adding a parameters section to the get operation and adding a required parameter with a name matching the parameter defined in the path (here username) located in path of type string. We also provide an optional description.

      parameters:
        - name: username
          in: path
          required: true
          description: The person's username
          type: string
A common problem when defining path parameter is to forget required: true (as the Swagger Editor snippet do not provide it). If required is not provided, its default value is false, meaning that the parameter is optional. A path parameter is always required.

Adding responses
Don’t forget to add 200 response returning a person. Note that the schema used in 200 is the same as the array’s item in get /persons 200 response.

      responses:
        200:
          description: A Person
          schema:
            required:
              - username
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
As a username may not match an existing person we also add a 404 response. Note that this response do not return anything besides the 404 http status code.

        404:
          description: The Person does not exists.
Defining a body parameter
We would like to have the capability of adding a person to our list of persons so we’ll add a post /persons operation to our API.

swagger: "2.0"

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons. The list supports paging.
      parameters:
       - name: pageSize
         in: query
         description: Number of persons returned
         type: integer
       - name: pageNumber
         in: query
         description: Page number
         type: integer
      responses:
        200:
          description: A list of Person
          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
    post:
      summary: Creates a person
      description: Adds a new person to the persons list.
      parameters:
        - name: person
          in: body
          description: The person to create.
          schema:
            required:
              - username
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
      responses:
        204:
          description: Persons succesfully created.
        400:
          description: Persons couldn't have been created.
  /persons/{username}:
    get:
      summary: Gets a person
      description: Returns a single person for its username.
      parameters:
        - name: username
          in: path
          required: true
          description: The person's username
          type: string
      responses:
        200:
          description: A Person
          schema:
            required:
              - username
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
        404:
          description: The Person does not exists. 
Adding post /persons operation
We first add a post method to the /persons path (after the get one) in the paths section.

paths:
  /persons:
    post:
      summary: Creates a person
      description: Adds a new person to the persons list.
Describing a person body parameter
Then we define a parameter named person located in body of type object. The person object’s is described via it’s schema. Note that this schema is the same as the 200 response of get /persons/{username}. The firstName and lastName attributes are optional and username is required.

      parameters:
        - name: person
          in: body
          description: The person to create.
          schema:
            required:
              - username
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
Defining responses
Don’t forget to define responses for this new operation.

      responses:
        204:
          description: Persons succesfully created.
        400:
          description: Persons couldn't have been created.